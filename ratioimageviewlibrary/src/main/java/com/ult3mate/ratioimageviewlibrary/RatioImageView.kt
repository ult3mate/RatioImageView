package com.ult3mate.ratioimageviewlibrary

import android.annotation.TargetApi
import android.content.Context
import android.os.Build
import android.os.Parcel
import android.os.Parcelable
import android.preference.Preference
import android.support.v7.widget.AppCompatImageView
import android.util.AttributeSet


/**
 * Created by beer on 7/6/2018 AD.
 * Ratio ImageView Render ImageView with aspect ratio
 */
class RatioImageView : AppCompatImageView {

    private var heightPixel = 0
    private var widthPixel = 0

    private var whRatio = 0f

    @JvmOverloads
    constructor(
            context: Context,
            attrs: AttributeSet? = null,
            defStyleAttr: Int = 0)
            : super(context, attrs, defStyleAttr){
        initAttrs(attrs)
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    constructor(
            context: Context,
            attrs: AttributeSet?,
            defStyleAttr: Int,
            defStyleRes: Int)
            : super(context, attrs, defStyleAttr){
        initAttrs(attrs)
    }

    fun setRealHeightImagePixel(heightPixel: Int) {
        if (heightPixel > -1) {
            this.heightPixel = heightPixel
        }
    }

    fun setWidthHeightImagePixel(widthPixel: Int) {
        if (widthPixel > -1) {
            this.widthPixel = widthPixel
        }
    }

    private fun initAttrs(attrs: AttributeSet?) {
        //Retrieve styles attributes
        val a = context.obtainStyledAttributes(attrs,
                R.styleable.RatioImageView)

        val originalImageWidthPixel = a.getDimensionPixelSize(
                R.styleable.RatioImageView_originalImageWidth,
                0)
        val originalImageHeightPixel = a.getDimensionPixelSize(
                R.styleable.RatioImageView_originalImageHeight,
                0)

        if (originalImageWidthPixel > 0 && originalImageHeightPixel > 0) {
            setOriginalImageWidthAndHeight(originalImageWidthPixel, originalImageHeightPixel)
        }

        val aspectRatio = a.getFloat(
                R.styleable.RatioImageView_ratio, 0f)
        if (aspectRatio > 0) {
            this.whRatio = aspectRatio
        }

        a.recycle()
    }

    /**
     * set ratio of image size
     */
    fun setImageViewRatio(ratio: Float) {
        whRatio = ratio
    }
    /**
     * Force set image size
     */
    fun setOriginalImageWidthAndHeight(widthPixel: Int, heightPixel: Int) {
        this.widthPixel = widthPixel
        this.heightPixel = heightPixel
        this.whRatio = widthPixel.toFloat() / heightPixel.toFloat()
        requestLayout()
    }

    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec)
        if (whRatio != 0f) {
            val width = measuredWidth
            val height = (whRatio * width).toInt()
            setMeasuredDimension(width, height)
        } else if (heightPixel != 0 && widthPixel != 0) {
            val width = measuredWidth
            val height = (whRatio * width).toInt()
            setMeasuredDimension(width, height)
        }
    }

    override fun onSaveInstanceState(): SavedState? {
        val superState = super.onSaveInstanceState()

        val state = SavedState(superState)
        state.whRatio = whRatio
        state.width = widthPixel
        state.height = heightPixel

        return state
    }

    /**
     * Re-apply a representation of internal state that had previously been generated by
     * [.onSaveInstanceState]. This function will never be called with a null state.
     *
     * @param state The frozen state that had previously been returned by
     * [.onSaveInstanceState].
     */
    public override fun onRestoreInstanceState(state: Parcelable) {
        if (state is SavedState) {
            super.onRestoreInstanceState(state.superState)
            whRatio = state.whRatio
        } else {
            throw IllegalArgumentException("Wrong state class, expecting SavedState but " +
                    "received instead. This usually happens " +
                    "when two views of different type have the same id in the same hierarchy. " +
                    "Make sure other views do not use the same id.")
        }
    }

    /**
     * A class for managing the instance state of a [RatioImageView].
     */
    class SavedState : Preference.BaseSavedState {

        var whRatio: Float = 0.toFloat()
        var width: Int = 0
        var height: Int = 0

        /**
         * Constructor used when reading from a parcel. Reads the state of the superclass.
         *
         * @param source The parcel containing the instance state of the class.
         */
        constructor(source: Parcel) : super(source) {

            whRatio = source.readFloat()
            width = source.readInt()
            height = source.readInt()

        }

        /**
         * Constructor called when creating a SavedState object
         *
         * @param superState The state of the superclass of this view
         */
        constructor(superState: Parcelable) : super(superState) {}

        override fun writeToParcel(out: Parcel, flags: Int) {
            super.writeToParcel(out, flags)
            out.writeFloat(whRatio)
            out.writeInt(width)
            out.writeInt(height)

        }

        companion object {
            val CREATOR: Parcelable.Creator<SavedState> = object : Parcelable.Creator<SavedState> {
                override fun createFromParcel(`in`: Parcel): SavedState {
                    return SavedState(`in`)
                }

                override fun newArray(size: Int): Array<SavedState?> {
                    return arrayOfNulls(size)
                }
            }
        }
    }
}